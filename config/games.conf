
########################### GAMES ############################
{
# Standard discrete bilinear small n
	game_id="Bilinear n=100 a=0.25 b=0.25";
	game="discr_bilinear";
	n=100;
	n_pred=n;
	n_prey=n;
	alpha=0.25;
	beta=0.25;

|
# Standard discrete bilinear large n
	game_id="Bilinear n=1000 a=0.25 b=0.25";
	game="discr_bilinear";
	n=1000;
	n_pred=n;
	n_prey=n;
	alpha=0.25;
	beta=0.25;

|
# Diagonal game 
	game_id="Diagonal test n=50";
	game="general_diagonal_test";
	diagonal_alpha=0.0;
	diagonal_beta=0.0;
	n=50;
	init_pred_bias=0.5;
	init_prey_bias=0.5;

|
# WindowedOneMax is a zero-sum game where the prey y can 
# choose an index i \\in [n] by having a one-bit in the 
# index position and zero-bits everywhere else.
# Once an index is chosen, the payoff of x is the number 
# of one-bits in the window.
# We believe that a diverse prey population is needed to
# solve this problem or an archive.
	game_id="Windowed OneMax n=100 w=10";
	game="discr_windowed_om";
	n=100;
	window=sqrt(n); 

|
# OptInvSubopt is a zero-sum game with k blocks where if the 
# prey y does not have all zero-bits in a block then the
# block contributes the number of one-bits in x to the payoff
# plus one, but if the prey y have all zero-bits in a block 
# then the block subtracts the number of one-bits in x plus
# one from the payoff.
	game_id="OptInvSubopt n=400 block_size=10";
	game="discr_optinvsubopt";
	n=400;
	block_size=10; 

|
# Simple problem that gives always the correct signal to 
# the algorithms.
	game_id="MaximinHill n=1000 a=0.25 b=0.25";
	game="discr_maximinhill";
	n=1000;
	alpha=0.05;
	beta=0.05;

|
# Bilinear function as a base but the inputs are 
# preprocessed by another function.
	game_id="Hidden Bilinear (LO) n=100 a=0.25 b=0.25";
	game="discr_hidden_bilinear";
	pred_problem : [ fitness="leadingones"; ];
	prey_problem : [ fitness="leadingones"; ];
	n=100;
	alpha=0.25;
	beta=0.25;

# |

# 	game_id="Hidden Bilinear (binval) n=1000 a=0.25 b=0.25";
# 	game="discr_hidden_bilinear";
# 	pred_problem : [ fitness="binval"; ];
# 	prey_problem : [ fitness="binval"; ];
# 	n=1000;
# 	alpha=0.25;
# 	beta=0.25;

# |

# 	game_id="Hidden Bilinear (linear) n=1000 a=0.25 b=0.25";
# 	game="discr_hidden_bilinear";
# 	pred_problem : [ fitness="randomlinear"; ];
# 	prey_prolem : [ fitness="randomlinear"; ];
# 	n=1000;
# 	alpha=0.25;
# 	beta=0.25;
}
